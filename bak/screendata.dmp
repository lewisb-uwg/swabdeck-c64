00001  0000             
00002  0001             
00003  0001             ; 10 SYS (2080)
00004  0001             
00005  0001             ; COLOR CONSTANTS
00006  0001             WHITE=$01
00007  0001             BLACK=$00
00008  0001             GREY2=$0C
00009  0001             VIOLET=$04 
00010  0001             CYAN=$03
00011  0001             BLUE=$06
00012  0001             BROWN=$09
00013  0001             
00014  0001             ; ADDRESSES OF VIC-RELATED STUFF
00015  0001             SCREEN_RAM=$0400 
00016  0001             SCREEN_DATA=$9C00 
00017  0001             CHAR_DATA_MULTIPLIER=($3800/$0800)<<1 
00018  0001             
00019  0001             ; 256-BYTE BLOCKS OF SCREEN DATA, USED
00020  0001             ; TO UNROLL THE SCREEN SETUP AND AVOID
00021  0001             ; NASTY 2-BYTE ADDITION
00022  0001             SD_BLOCK_1 = SCREEN_DATA
00023  0001             SD_BLOCK_2 = SCREEN_DATA + 256
00024  0001             SD_BLOCK_3 = SCREEN_DATA + 512
00025  0001             SD_BLOCK_4 = SCREEN_DATA + 768
00026  0001             
00027  0001             ; START OF SPRITE PIXEL DATA, AS A VIC OFFSET
00028  0001             SPRITE_DATA=$2E80/64 
00029  0001             
00030  0001             ; SPRITE 0 (PIRATE/PLAYER AVATAR) CONSTANTS
00031  0001             PIRATE_DATA_PTR = $07F8
00032  0001             PIRATE_X_PTR = $D000
00033  0001             PIRATE_Y_PTR = $D001
00034  0001             PIRATE_STANDING=SPRITE_DATA 
00035  0001             PIRATE_RUNNING=SPRITE_DATA+1 
00036  0001             
00037  0001             ; SPRITE 1 (SEAGULL) CONSTANTS
00038  0001             SEAGULL_DATA_PTR = $07F9
00039  0001             SEAGULL_WINGS_UP=SPRITE_DATA+2 
00040  0001             SEAGULL_WINGS_DOWN=SPRITE_DATA+3 
00041  0001             SEAGULL_X_PTR = $D002
00042  0001             SEAGULL_Y_PTR = $D003
00043  0001             
00044  0001             ; SPRITE 2 (THE "COCONUT") CONSTANTS
00045  0001             COCONUT_DATA_PTR = $07FA
00046  0001             COCONUT_X_PTR = $D004
00047  0001             COCONUT_Y_PTR = $D005
00048  0001             COCONUT_HORZ=SPRITE_DATA+4 
00049  0001             COCONUT_VERT=SPRITE_DATA+5 
00050  0001             
00051  0001             ; VARIABLES
00052  0001             SRC=$C0
00053  0001             SRC_HI=SRC+1 
00054  0001             DEST=SRC_HI+1 
00055  0001             DEST_HI=DEST+1 
00056  0001             LOOP_TICK=DEST_HI+1 
00057  0001             X_COORD_PTR=LOOP_TICK+1 
00058  0001             X_INCREMENT_VALUE_PTR=X_COORD_PTR+2 
00059  0001             SPRITE_MASK_BIT_PTR=X_INCREMENT_VALUE_PTR+1 
00060  0001             ; NEXT VARIABLE SHOULD BE TWO LATER...
00061  0001             
00062  0001             
00063  0001             ; ANIMATION/MOTION SPEED CONSTANTS
00064  0001             ; THE IDEA HERE IS THE MAIN LOOP OPERATES ON A WRAP-AROUND TICK OF 256.
00065  0001             ; THE 1'S PATTERNS HERE DETERMINE THE SPEED, E.G., FASTEST_SPEED HAPPENS
00066  0001             ; EVERY-OTHER TICK, HALF_SPEED EVERY FOURTH TICK, ETC.
00067  0001             FASTEST_SPEED = %00000001
00068  0001             HALF_SPEED = %00000011
00069  0001             QUARTER_SPEED = %00000111
00070  0001             1_8TH_SPEED = %00001111
00071  0001             1_16TH_SPEED = %00011111
00072  0001             1_32ND_SPEED = %00111111
00073  0001             1_64TH_SPEED = %01111111
00074  0001             SLOWEST_SPEED = %11111111
00075  0001             
00076  0001             
00077  0001             ; PERFORMS A BITWISE-NOT ON THE ACCUMULATOR CONTENTS
00078  0001             DEFM       INVERT_ACC
00079  0001                        EOR #$FF
00080  0001                        ENDM
00081  0001             
00082  0001             ; /1 : DESTINATION ADDRESS
00083  0001             ; /2 : IMMEDIATE VALUE (SANS #)
00084  0001             DEFM       STORE_2_BYTE_VALUE
00085  0001                        ; STORE THE LOW BYTE
00086  0001                        LDA #</2
00087  0001                        STA /1
00088  0001             
00089  0001                        ; STORE THE HI BYTE
00090  0001                        LDY #1
00091  0001                        LDA #>/2
00092  0001                        STA /1,Y
00093  0001                        ENDM
00094  0001             
00095  0001             
00096  0001             
00097  0001             
00098  0001             ; /1 : SRC ADDRESS
00099  0001             DEFM       SET_SRC
00100  0001                        LDY #0
00101  0001                        LDA #>/1
00102  0001                        STA SRC_HI
00103  0001                        LDA #</1
00104  0001                        STA SRC
00105  0001                        ENDM
00106  0001             
00107  0001             ; /1 : DEST ADDRESS
00108  0001             DEFM       SET_DEST
00109  0001                        LDY #0
00110  0001                        LDA #>/1
00111  0001                        STA DEST_HI
00112  0001                        LDA #</1
00113  0001                        STA DEST
00114  0001                        ENDM
00115  0001             
00116  0001             DEFM       ENABLE_SPRITES
00117  0001                        ; ALL SPRITES WERE DESIGNED AS MULTICOLOR,
00118  0001                        ; EVEN THOUGH 1 AND 2 ONLY USE A SINGLE COLOR
00119  0001                        LDA #$07
00120  0001                        STA $D01C
00121  0001             
00122  0001                        ; TURN ON SPRITES 0, 1, AND 2
00123  0001                        LDA #$07
00124  0001                        STA $D015
00125  0001                        ENDM
00126  0001             
00127  0001             DEFM       SET_COMMON_MULTICOLOR_SPRITE_COLORS
00128  0001                        ; 01 SHARED COLOR #0
00129  0001                        LDA #CYAN
00130  0001                        STA $D025
00131  0001             
00132  0001                        ; 11 SHARED COLOR #1
00133  0001                        LDA #BLUE
00134  0001                        STA $D026
00135  0001             
00136  0001                        ENDM
00137  0001             
00138  0001             ; 10 SYS (2049)
00139  0001             
00140  0001             ; 10 SYS (2064)
00141  0001             
00142  0001             *=$0801
00143  0801             
00144  0801  0E 08 0A              BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $30, $36, $34, $29, $00, $00, $00
00145  0810             
00146  0810             
00147  0810             
00148  0810             ; PROGRAM ENTRANCE
00149  0810             *=$0810
00150  0810             
00151  0810                        ; SETUP PHASE
00152  0810  20 14 09              JSR COPY_SCREEN_DATA_TO_SCREEN_RAM
00153  0813  20 7B 09              JSR ENABLE_MULTICOLOR_CHAR_MODE
00154  0816  20 84 09              JSR SET_SHARED_SCREEN_COLORS
00155  0819  20 B1 08              JSR REDIRECT_TO_CUSTOM_CHARSET
00156  081C  20 B7 08              JSR APPLY_PER_CHAR_COLORS
00157  081F  20 9C 08              JSR INITIALIZE_PIRATE_SPRITE
00158  0822  20 87 08              JSR INITIALIZE_SEAGULL_SPRITE
00159  0825  20 72 08              JSR INITIALIZE_COCONUT_SPRITE
00160  0828             
00161  0828             
00162  0828  A9 03                 LDA #CYAN
00163  082A  8D 25 D0              STA $D025
00164  082D             
00165  082D  A9 06                 LDA #BLUE
00166  082F  8D 26 D0              STA $D026
00167  0832             
00168  0832             
00169  0832             
00170  0832             
00171  0832             
00172  0832  A9 07                 LDA #$07
00173  0834  8D 1C D0              STA $D01C
00174  0837             
00175  0837  A9 07                 LDA #$07
00176  0839  8D 15 D0              STA $D015
00177  083C             
00178  083C             
00179  083C             
00180  083C             
00181  083C                        ; MAIN GAME LOOP
00182  083C  A9 00                 LDA #$00
00183  083E  85 C4                 STA LOOP_TICK ; INIT LOOP TICK TO ZERO
00184  0840             MAIN_GAME_LOOP 
00185  0840                        ; UPDATE THE PIRATE'S LOCATION AND ANIMATION
00186  0840             
00187  0840                        ; UPDATE THE SEAGULL'S LOCATION AND ANIMATION
00188  0840  20 94 09              JSR UPDATE_SEAGULL
00189  0843             
00190  0843                        ; UPDATE THE COCONUT'S LOCATION AND ANIMATION
00191  0843             
00192  0843                        ; INCREMENT THE LOOP TICK (NOTE IT ROLLS OVER AUTOMATICALLY)
00193  0843  A5 C4                 LDA LOOP_TICK
00194  0845  69 01                 ADC #1
00195  0847  85 C4                 STA LOOP_TICK
00196  0849             
00197  0849                        ; FOR NOW, INFINITE GAME LOOP
00198  0849  A9 00                 LDA #0
00199  084B  F0 F3                 BEQ MAIN_GAME_LOOP
00200  084D             
00201  084D  60                    RTS
00202  084E             
00203  084E             ; MOVES A SPRITE BY INCREMENTING ITS X-COORDINATE
00204  084E             ; INPUTS:
00205  084E             ; X_COORD_PTR : MEMORY LOCATION OF THE X-COORDINATE TO INCREMENT
00206  084E             ; X_INCREMENT_VALUE_PTR : MEMORY LOCATION HOLDING THE INCREMENT VALUE
00207  084E             ; SPRITE_MASK_BIT_PTR : MEMORY LOCATION WITH A MASK BIT FOR THE SPRITE THIS AFFECTS
00208  084E             ADD_TO_X_COORDINATE 
00209  084E  A0 00                 LDY #0
00210  0850  B1 C5                 LDA (X_COORD_PTR),Y
00211  0852  71 C7                 ADC (X_INCREMENT_VALUE_PTR),Y
00212  0854  85 C5                 STA X_COORD_PTR ; NOTE: DOES NOT RESET CARRY FLAG
00213  0856  90 19                 BCC @END ; IF C=0, NOTHING MORE REQUIRED
00214  0858             
00215  0858                        ; C=1, WE HAVE TO DEAL WITH THE HIGH BIT
00216  0858  B1 C8                 LDA (SPRITE_MASK_BIT_PTR),Y
00217  085A  2D 10 D0              AND $D010 ; CONTAINS THE HI BITS OF SPRITE X-LOCATIONS
00218  085D  F0 08                 BEQ @CLEAR_HI_BIT
00219  085F             
00220  085F             @SET_HI_BIT 
00221  085F  AD 10 D0              LDA $D010
00222  0862  05 C8                 ORA SPRITE_MASK_BIT_PTR
00223  0864  4C 6E 08              JMP @MOD_HI_BIT
00224  0867             
00225  0867             @CLEAR_HI_BIT 
00226  0867  B1 C8                 LDA (SPRITE_MASK_BIT_PTR),Y
00227  0869             
00228  0869             
00229  0869  49 FF                 EOR #$FF
00230  086B  2D 10 D0              AND $D010
00231  086E             @MOD_HI_BIT 
00232  086E  8D 10 D0              STA $D010
00233  0871  60         @END       RTS
00234  0872             
00235  0872             INITIALIZE_COCONUT_SPRITE ; SPRITE 2
00236  0872                        ; SET THE COCONUT'S 10 COLOR
00237  0872  A9 01                 LDA #WHITE
00238  0874  8D 29 D0              STA $D029
00239  0877             
00240  0877                        ; TELL VIC WHERE THE FIRST COCONUT FRAME IS
00241  0877  A9 BE                 LDA #COCONUT_HORZ
00242  0879  8D FA 07              STA COCONUT_DATA_PTR
00243  087C                        
00244  087C                        ; INITAL COCONUT X (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00245  087C  A9 3C                 LDA #60
00246  087E  8D 04 D0              STA COCONUT_X_PTR
00247  0881             
00248  0881                        ; INITIAL COCONUT Y (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00249  0881  A9 64                 LDA #100
00250  0883  8D 05 D0              STA COCONUT_Y_PTR
00251  0886  60                    RTS
00252  0887             
00253  0887             INITIALIZE_SEAGULL_SPRITE ; SPRITE 1
00254  0887                        ; SET THE GULL'S 10 COLOR
00255  0887  A9 01                 LDA #WHITE
00256  0889  8D 28 D0              STA $D028
00257  088C             
00258  088C                        ; TELL VIC WHERE THE FIRST GULL FRAME IS
00259  088C  A9 BD                 LDA #SEAGULL_WINGS_DOWN
00260  088E  8D F9 07              STA SEAGULL_DATA_PTR
00261  0891             
00262  0891                        ; INITIAL GULL X (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00263  0891  A9 3C                 LDA #60
00264  0893  8D 02 D0              STA SEAGULL_X_PTR
00265  0896             
00266  0896                        ; INITIAL GULL Y (NOTE: SHOULD NEVER CHANGE)
00267  0896  A9 32                 LDA #50
00268  0898  8D 03 D0              STA SEAGULL_Y_PTR
00269  089B  60                    RTS
00270  089C             
00271  089C             INITIALIZE_PIRATE_SPRITE ; SPRITE 2
00272  089C                        ; SET THE PIRATE'S 10 COLOR
00273  089C  A9 09                 LDA #BROWN
00274  089E  8D 27 D0              STA $D027
00275  08A1             
00276  08A1                        ; TELL VIC WHERE THE FIRST PIRATE FRAME IS
00277  08A1  A9 BA                 LDA #PIRATE_STANDING
00278  08A3  8D F8 07              STA PIRATE_DATA_PTR
00279  08A6             
00280  08A6                        ; INITIAL PIRATE X
00281  08A6  A9 3C                 LDA #60
00282  08A8  8D 00 D0              STA PIRATE_X_PTR
00283  08AB             
00284  08AB                        ; INITIAL PIRATE Y (NOTE: SHOULD NEVER CHANGE)
00285  08AB  A9 BC                 LDA #188
00286  08AD  8D 01 D0              STA PIRATE_Y_PTR
00287  08B0  60                    RTS
00288  08B1                        
00289  08B1             REDIRECT_TO_CUSTOM_CHARSET 
00290  08B1  A9 1C                 LDA #28
00291  08B3  8D 18 D0              STA $D018
00292  08B6  60                    RTS
00293  08B7             
00294  08B7             APPLY_PER_CHAR_COLORS 
00295  08B7             
00296  08B7             
00297  08B7  A0 00                 LDY #0
00298  08B9  A9 D8                 LDA #>$D800
00299  08BB  85 C3                 STA DEST_HI
00300  08BD  A9 00                 LDA #<$D800
00301  08BF  85 C2                 STA DEST
00302  08C1             
00303  08C1             
00304  08C1  A0 00                 LDY #0
00305  08C3  A9 98                 LDA #>$9800
00306  08C5  85 C1                 STA SRC_HI
00307  08C7  A9 00                 LDA #<$9800
00308  08C9  85 C0                 STA SRC
00309  08CB  20 71 09              JSR MOVE_256_BYTES
00310  08CE             
00311  08CE             
00312  08CE             
00313  08CE  A0 00                 LDY #0
00314  08D0  A9 D9                 LDA #>$D900
00315  08D2  85 C3                 STA DEST_HI
00316  08D4  A9 00                 LDA #<$D900
00317  08D6  85 C2                 STA DEST
00318  08D8             
00319  08D8             
00320  08D8  A0 00                 LDY #0
00321  08DA  A9 99                 LDA #>$9900
00322  08DC  85 C1                 STA SRC_HI
00323  08DE  A9 00                 LDA #<$9900
00324  08E0  85 C0                 STA SRC
00325  08E2  20 71 09              JSR MOVE_256_BYTES
00326  08E5             
00327  08E5             
00328  08E5             
00329  08E5  A0 00                 LDY #0
00330  08E7  A9 DA                 LDA #>$DA00
00331  08E9  85 C3                 STA DEST_HI
00332  08EB  A9 00                 LDA #<$DA00
00333  08ED  85 C2                 STA DEST
00334  08EF             
00335  08EF             
00336  08EF  A0 00                 LDY #0
00337  08F1  A9 9A                 LDA #>$9A00
00338  08F3  85 C1                 STA SRC_HI
00339  08F5  A9 00                 LDA #<$9A00
00340  08F7  85 C0                 STA SRC
00341  08F9  20 71 09              JSR MOVE_256_BYTES
00342  08FC             
00343  08FC             
00344  08FC             
00345  08FC  A0 00                 LDY #0
00346  08FE  A9 DB                 LDA #>$DB00
00347  0900  85 C3                 STA DEST_HI
00348  0902  A9 00                 LDA #<$DB00
00349  0904  85 C2                 STA DEST
00350  0906             
00351  0906             
00352  0906  A0 00                 LDY #0
00353  0908  A9 9B                 LDA #>$9B00
00354  090A  85 C1                 STA SRC_HI
00355  090C  A9 00                 LDA #<$9B00
00356  090E  85 C0                 STA SRC
00357  0910  20 71 09              JSR MOVE_256_BYTES
00358  0913             
00359  0913  60                    RTS
00360  0914             
00361  0914             ; COPIES _SCREEN_DATA TO THE THE SCREEN RAM AT $0400
00362  0914             ; EVEN THOUGH SCREEN DATA IS ONLY 1000 BYTES, IT WILL COPY 1024!!!
00363  0914             COPY_SCREEN_DATA_TO_SCREEN_RAM 
00364  0914                        ; FIRST 256-BYTE BLOCK IS $0400-$04FF, FROM
00365  0914             
00366  0914             
00367  0914  A0 00                 LDY #0
00368  0916  A9 04                 LDA #>$0400
00369  0918  85 C3                 STA DEST_HI
00370  091A  A9 00                 LDA #<$0400
00371  091C  85 C2                 STA DEST
00372  091E             
00373  091E             
00374  091E  A0 00                 LDY #0
00375  0920  A9 9C                 LDA #>SD_BLOCK_1
00376  0922  85 C1                 STA SRC_HI
00377  0924  A9 00                 LDA #<SD_BLOCK_1
00378  0926  85 C0                 STA SRC
00379  0928  20 71 09              JSR MOVE_256_BYTES
00380  092B                        
00381  092B                        ; SECOND 256-BYTE BLOCK IS $0500-$05FF
00382  092B             
00383  092B             
00384  092B  A0 00                 LDY #0
00385  092D  A9 05                 LDA #>$0500
00386  092F  85 C3                 STA DEST_HI
00387  0931  A9 00                 LDA #<$0500
00388  0933  85 C2                 STA DEST
00389  0935             
00390  0935             
00391  0935  A0 00                 LDY #0
00392  0937  A9 9D                 LDA #>SD_BLOCK_2
00393  0939  85 C1                 STA SRC_HI
00394  093B  A9 00                 LDA #<SD_BLOCK_2
00395  093D  85 C0                 STA SRC
00396  093F  20 71 09              JSR MOVE_256_BYTES
00397  0942             
00398  0942                        ; THIRD 256-BYTE BLOCK IS $0600-$06FF
00399  0942             
00400  0942             
00401  0942  A0 00                 LDY #0
00402  0944  A9 06                 LDA #>$0600
00403  0946  85 C3                 STA DEST_HI
00404  0948  A9 00                 LDA #<$0600
00405  094A  85 C2                 STA DEST
00406  094C             
00407  094C             
00408  094C  A0 00                 LDY #0
00409  094E  A9 9E                 LDA #>SD_BLOCK_3
00410  0950  85 C1                 STA SRC_HI
00411  0952  A9 00                 LDA #<SD_BLOCK_3
00412  0954  85 C0                 STA SRC
00413  0956  20 71 09              JSR MOVE_256_BYTES
00414  0959             
00415  0959                        ; FOURTH 256-BYTE BLOCK IS $0700-$07FF
00416  0959             
00417  0959             
00418  0959  A0 00                 LDY #0
00419  095B  A9 07                 LDA #>$0700
00420  095D  85 C3                 STA DEST_HI
00421  095F  A9 00                 LDA #<$0700
00422  0961  85 C2                 STA DEST
00423  0963             
00424  0963             
00425  0963  A0 00                 LDY #0
00426  0965  A9 9F                 LDA #>SD_BLOCK_4
00427  0967  85 C1                 STA SRC_HI
00428  0969  A9 00                 LDA #<SD_BLOCK_4
00429  096B  85 C0                 STA SRC
00430  096D  20 71 09              JSR MOVE_256_BYTES
00431  0970             
00432  0970  60                    RTS
00433  0971             
00434  0971             ; COPIES 256 TYES FROM SRC TO DEST
00435  0971             ; SRC: FIRST (LOW) BYTE OF ADDRESS CONTAINING THE SOURCE ADDRESS
00436  0971             ; DEST: FIRST (LOW) BYTE OF ADDRESS CONTAINING THE DESTINATION ADDRESS
00437  0971             ; CORRUPTS REGISTERS A AND Y
00438  0971             MOVE_256_BYTES 
00439  0971  A0 00                 LDY #0
00440  0973  B1 C0      @LOOP      LDA (SRC),Y
00441  0975  91 C2                 STA (DEST),Y
00442  0977  C8                    INY ; NOTE THAT THIS WILL ROLLOVER TO ZERO AT "Y=256"
00443  0978  D0 F9                 BNE @LOOP
00444  097A  60                    RTS
00445  097B             
00446  097B             
00447  097B             
00448  097B             ; LDA WILL BE CORRUPTED
00449  097B             ENABLE_MULTICOLOR_CHAR_MODE 
00450  097B  AD 16 D0              LDA $D016
00451  097E  09 10                 ORA #16
00452  0980  8D 16 D0              STA $D016
00453  0983  60                    RTS
00454  0984             
00455  0984             ; LDA WILL BE CORRUPTED
00456  0984             SET_SHARED_SCREEN_COLORS 
00457  0984                        ; SET THE 00 COLOR
00458  0984  A9 00                 LDA #BLACK
00459  0986  8D 21 D0              STA $D021
00460  0989             
00461  0989                        ; SET THE 01 COLOR
00462  0989  A9 0C                 LDA #GREY2
00463  098B  8D 22 D0              STA $D022
00464  098E             
00465  098E                        ; SET THE 10 COLOR
00466  098E  A9 04                 LDA #VIOLET
00467  0990  8D 23 D0              STA $D023
00468  0993             
00469  0993  60                    RTS
00470  0994             
00471  0994             ; ADVANCES THE SEAGULL TO THE RIGHT (WRAPPING IF NECESSARY),
00472  0994             ; AND SWITCHES BETWEEN ANIMATION FRAMES
00473  0994             ; /1 : CURRENT LOOP TICK
00474  0994             ; /2 : ANIMATION SPEED
00475  0994             ; /3 : MOVEMENT SPEED
00476  0994             UPDATE_SEAGULL 
00477  0994                        ; SWITCH ANIMATION FRAME
00478  0994  A5 C4                 LDA LOOP_TICK
00479  0996  29 01                 AND #FASTEST_SPEED ; AND WITH THE SPEED
00480  0998  C9 01                 CMP #FASTEST_SPEED ; SEE IF THE RESULT MATCHES THE SPEED
00481  099A  D0 17                 BNE @MOVEMENT ; SKIP ANIMATION ON NO MATCH (IT'S NOT YET TIME TO FIRE)
00482  099C                        
00483  099C                        ; PERFORM THE ANIMATION
00484  099C             
00485  099C                        ; PICK THE APPROPRIATE ANIMATION, BASED ON CONTENTS
00486  099C                        ; OF SEAGULL_DATA_PTR
00487  099C  AD F9 07              LDA SEAGULL_DATA_PTR
00488  099F  C9 BC                 CMP #SEAGULL_WINGS_UP
00489  09A1  F0 08                 BEQ @CHOOSE_WINGS_DOWN
00490  09A3             @CHOOSE_WINGS_UP 
00491  09A3  A9 BC                 LDA #SEAGULL_WINGS_UP
00492  09A5  8D F9 07              STA SEAGULL_DATA_PTR
00493  09A8  4C B3 09              JMP @MOVEMENT
00494  09AB             
00495  09AB             @CHOOSE_WINGS_DOWN 
00496  09AB  A9 BD                 LDA #SEAGULL_WINGS_DOWN
00497  09AD  8D F9 07              STA SEAGULL_DATA_PTR
00498  09B0  4C B3 09              JMP @MOVEMENT
00499  09B3             
00500  09B3             @MOVEMENT
00501  09B3  A5 C4                 LDA LOOP_TICK
00502  09B5  29 01                 AND #FASTEST_SPEED
00503  09B7  C9 01                 CMP #FASTEST_SPEED
00504  09B9  D0 18                 BNE @END
00505  09BB                        
00506  09BB                        ; PERFORM THE MOVEMENT
00507  09BB             
00508  09BB             
00509  09BB  A9 02                 LDA #<SEAGULL_X_PTR
00510  09BD  85 C5                 STA X_COORD_PTR
00511  09BF             
00512  09BF  A0 01                 LDY #1
00513  09C1  A9 D0                 LDA #>SEAGULL_X_PTR
00514  09C3  99 C5 00              STA X_COORD_PTR,Y
00515  09C6             
00516  09C6             
00517  09C6  A9 0A                 LDA #10 ; HOW FAR THE SEAGULL MOVES
00518  09C8  A0 00                 LDY #0
00519  09CA  91 C7                 STA (X_INCREMENT_VALUE_PTR),Y
00520  09CC  A9 02                 LDA #%00000010 ; MASK FOR SPRITE 1
00521  09CE  91 C8                 STA (SPRITE_MASK_BIT_PTR),Y
00522  09D0  20 4E 08              JSR ADD_TO_X_COORDINATE
00523  09D3                        
00524  09D3  60         @END       RTS
00525  09D4             
00526  09D4             *=$2E80
00527  2E80             ; PIRATE_STANDING
00528  2E80             _PIRATE_STANDING 
00529  2E80  0A 80 00              BYTE $0A,$80,$00
00530  2E83  2A A0 00              BYTE $2A,$A0,$00
00531  2E86  2A A0 00              BYTE $2A,$A0,$00
00532  2E89  AA A0 00              BYTE $AA,$A0,$00
00533  2E8C  87 50 00              BYTE $87,$50,$00
00534  2E8F  85 50 00              BYTE $85,$50,$00
00535  2E92  05 40 00              BYTE $05,$40,$00
00536  2E95  0F C0 00              BYTE $0F,$C0,$00
00537  2E98  2F E0 00              BYTE $2F,$E0,$00
00538  2E9B  AF E8 00              BYTE $AF,$E8,$00
00539  2E9E  97 E8 00              BYTE $97,$E8,$00
00540  2EA1  A5 E8 00              BYTE $A5,$E8,$00
00541  2EA4  AA 6A 00              BYTE $AA,$6A,$00
00542  2EA7  AA 9A 00              BYTE $AA,$9A,$00
00543  2EAA  3F D6 00              BYTE $3F,$D6,$00
00544  2EAD  3F F5 00              BYTE $3F,$F5,$00
00545  2EB0  0F C1 40              BYTE $0F,$C1,$40
00546  2EB3  2B A0 50              BYTE $2B,$A0,$50
00547  2EB6  28 A0 D7              BYTE $28,$A0,$D7
00548  2EB9  A8 A0 D7              BYTE $A8,$A0,$D7
00549  2EBC  A8 A3 55              BYTE $A8,$A3,$55
00550  2EBF  00                    BYTE $00
00551  2EC0             
00552  2EC0             ; PIRATE_RUNNING
00553  2EC0             _PIRATE_RUNNING 
00554  2EC0  00 A8 00              BYTE $00,$A8,$00
00555  2EC3  02 AA 00              BYTE $02,$AA,$00
00556  2EC6  02 AA 00              BYTE $02,$AA,$00
00557  2EC9  0A AA 00              BYTE $0A,$AA,$00
00558  2ECC  08 75 00              BYTE $08,$75,$00
00559  2ECF  08 55 00              BYTE $08,$55,$00
00560  2ED2  00 54 00              BYTE $00,$54,$00
00561  2ED5  01 FC 00              BYTE $01,$FC,$00
00562  2ED8  01 FA 00              BYTE $01,$FA,$00
00563  2EDB  09 7A 00              BYTE $09,$7A,$00
00564  2EDE  0A AE 00              BYTE $0A,$AE,$00
00565  2EE1  0A A6 00              BYTE $0A,$A6,$00
00566  2EE4  03 D6 00              BYTE $03,$D6,$00
00567  2EE7  03 F6 80              BYTE $03,$F6,$80
00568  2EEA  03 F6 80              BYTE $03,$F6,$80
00569  2EED  03 FD C0              BYTE $03,$FD,$C0
00570  2EF0  0A FD 40              BYTE $0A,$FD,$40
00571  2EF3  2A 3A 40              BYTE $2A,$3A,$40
00572  2EF6  28 0A 40              BYTE $28,$0A,$40
00573  2EF9  28 02 50              BYTE $28,$02,$50
00574  2EFC  28 0D 54              BYTE $28,$0D,$54
00575  2EFF  00                    BYTE $00
00576  2F00             
00577  2F00             ; SEAGULL_WINGS_UP
00578  2F00             _SEAGULL_WINGS_UP 
00579  2F00  00 00 00              BYTE $00,$00,$00
00580  2F03  00 50 00              BYTE $00,$50,$00
00581  2F06  01 54 00              BYTE $01,$54,$00
00582  2F09  05 55 00              BYTE $05,$55,$00
00583  2F0C  15 05 00              BYTE $15,$05,$00
00584  2F0F  00 05 40              BYTE $00,$05,$40
00585  2F12  00 15 04              BYTE $00,$15,$04
00586  2F15  01 55 55              BYTE $01,$55,$55
00587  2F18  55 55 54              BYTE $55,$55,$54
00588  2F1B  05 55 50              BYTE $05,$55,$50
00589  2F1E  01 55 00              BYTE $01,$55,$00
00590  2F21  05 40 00              BYTE $05,$40,$00
00591  2F24  04 00 00              BYTE $04,$00,$00
00592  2F27  00 00 00              BYTE $00,$00,$00
00593  2F2A  00 00 00              BYTE $00,$00,$00
00594  2F2D  00 00 00              BYTE $00,$00,$00
00595  2F30  00 00 00              BYTE $00,$00,$00
00596  2F33  00 00 00              BYTE $00,$00,$00
00597  2F36  00 00 00              BYTE $00,$00,$00
00598  2F39  00 00 00              BYTE $00,$00,$00
00599  2F3C  00 00 00              BYTE $00,$00,$00
00600  2F3F  00                    BYTE $00
00601  2F40             
00602  2F40             ; SEAGULL_WINGS_DOWN
00603  2F40             _SEAGULL_WINGS_DOWN 
00604  2F40  00 00 00              BYTE $00,$00,$00
00605  2F43  00 00 00              BYTE $00,$00,$00
00606  2F46  00 00 00              BYTE $00,$00,$00
00607  2F49  00 00 00              BYTE $00,$00,$00
00608  2F4C  00 00 00              BYTE $00,$00,$00
00609  2F4F  00 00 04              BYTE $00,$00,$04
00610  2F52  00 00 05              BYTE $00,$00,$05
00611  2F55  01 55 54              BYTE $01,$55,$54
00612  2F58  55 55 54              BYTE $55,$55,$54
00613  2F5B  05 55 50              BYTE $05,$55,$50
00614  2F5E  01 55 00              BYTE $01,$55,$00
00615  2F61  01 54 00              BYTE $01,$54,$00
00616  2F64  00 50 00              BYTE $00,$50,$00
00617  2F67  01 40 00              BYTE $01,$40,$00
00618  2F6A  05 00 00              BYTE $05,$00,$00
00619  2F6D  00 00 00              BYTE $00,$00,$00
00620  2F70  00 00 00              BYTE $00,$00,$00
00621  2F73  00 00 00              BYTE $00,$00,$00
00622  2F76  00 00 00              BYTE $00,$00,$00
00623  2F79  00 00 00              BYTE $00,$00,$00
00624  2F7C  00 00 00              BYTE $00,$00,$00
00625  2F7F  00                    BYTE $00
00626  2F80             
00627  2F80             ; COCONUT_HORZ
00628  2F80             _COCONUT_HORZ 
00629  2F80  00 00 00              BYTE $00,$00,$00
00630  2F83  00 00 00              BYTE $00,$00,$00
00631  2F86  00 00 00              BYTE $00,$00,$00
00632  2F89  00 00 00              BYTE $00,$00,$00
00633  2F8C  00 00 00              BYTE $00,$00,$00
00634  2F8F  00 00 00              BYTE $00,$00,$00
00635  2F92  00 00 00              BYTE $00,$00,$00
00636  2F95  00 00 00              BYTE $00,$00,$00
00637  2F98  00 00 00              BYTE $00,$00,$00
00638  2F9B  00 00 00              BYTE $00,$00,$00
00639  2F9E  00 00 00              BYTE $00,$00,$00
00640  2FA1  00 00 00              BYTE $00,$00,$00
00641  2FA4  00 00 00              BYTE $00,$00,$00
00642  2FA7  00 00 00              BYTE $00,$00,$00
00643  2FAA  00 00 00              BYTE $00,$00,$00
00644  2FAD  00 2A 00              BYTE $00,$2A,$00
00645  2FB0  00 AA 80              BYTE $00,$AA,$80
00646  2FB3  00 AA 80              BYTE $00,$AA,$80
00647  2FB6  00 AA 80              BYTE $00,$AA,$80
00648  2FB9  00 2A 00              BYTE $00,$2A,$00
00649  2FBC  00 00 00              BYTE $00,$00,$00
00650  2FBF  00                    BYTE $00
00651  2FC0             
00652  2FC0             ; COCONUT_VERT
00653  2FC0             _COCONUT_VERT 
00654  2FC0  00 00 00              BYTE $00,$00,$00
00655  2FC3  00 00 00              BYTE $00,$00,$00
00656  2FC6  00 00 00              BYTE $00,$00,$00
00657  2FC9  00 00 00              BYTE $00,$00,$00
00658  2FCC  00 00 00              BYTE $00,$00,$00
00659  2FCF  00 00 00              BYTE $00,$00,$00
00660  2FD2  00 00 00              BYTE $00,$00,$00
00661  2FD5  00 00 00              BYTE $00,$00,$00
00662  2FD8  00 00 00              BYTE $00,$00,$00
00663  2FDB  00 00 00              BYTE $00,$00,$00
00664  2FDE  00 00 00              BYTE $00,$00,$00
00665  2FE1  00 00 00              BYTE $00,$00,$00
00666  2FE4  00 00 00              BYTE $00,$00,$00
00667  2FE7  00 00 00              BYTE $00,$00,$00
00668  2FEA  00 08 00              BYTE $00,$08,$00
00669  2FED  00 2A 00              BYTE $00,$2A,$00
00670  2FF0  00 2A 00              BYTE $00,$2A,$00
00671  2FF3  00 2A 00              BYTE $00,$2A,$00
00672  2FF6  00 2A 00              BYTE $00,$2A,$00
00673  2FF9  00 2A 00              BYTE $00,$2A,$00
00674  2FFC  00 08 00              BYTE $00,$08,$00
00675  2FFF  00                    BYTE $00
00676  3000             
00677  3000             
00678  3000             *=$3000
00679  3000             CHARDATA
00680  3000  AA FF 5F              BYTE    $AA,$FF,$5F,$FF,$FF,$F7,$FF,$AA ; CHARACTER 0
00681  3008  AA FF FF              BYTE    $AA,$FF,$FF,$DF,$FF,$FD,$7F,$AA ; CHARACTER 1
00682  3010  AA FE FE              BYTE    $AA,$FE,$FE,$7E,$FE,$FE,$F6,$AA ; CHARACTER 2
00683  3018  AA BF BF              BYTE    $AA,$BF,$BF,$BD,$BF,$BF,$9F,$AA ; CHARACTER 3
00684  3020  96 96 96              BYTE    $96,$96,$96,$96,$96,$96,$96,$96 ; CHARACTER 4
00685  3028  FF FF FF              BYTE    $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; CHARACTER 5
00686  3030  03 03 0F              BYTE    $03,$03,$0F,$0F,$3F,$3F,$FF,$FF ; CHARACTER 6
00687  3038  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F ; CHARACTER 7
00688  3040  03 03 03              BYTE    $03,$03,$03,$03,$0F,$0F,$0F,$0F ; CHARACTER 8
00689  3048  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$03,$03,$03,$03 ; CHARACTER 9
00690  3050  FF FF 3F              BYTE    $FF,$FF,$3F,$3F,$0F,$0F,$03,$03 ; CHARACTER 10
00691  3058  3F 3F 3F              BYTE    $3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F ; CHARACTER 11
00692  3060  F0 F0 C0              BYTE    $F0,$F0,$C0,$C0,$C0,$00,$00,$00 ; CHARACTER 12
00693  3068  0F 0F 03              BYTE    $0F,$0F,$03,$03,$03,$00,$00,$00 ; CHARACTER 13
00694  3070  00 00 00              BYTE    $00,$00,$00,$C0,$C0,$C0,$F0,$F0 ; CHARACTER 14
00695  3078  00 00 00              BYTE    $00,$00,$00,$03,$03,$03,$0F,$0F ; CHARACTER 15
00696  3080  00 10 74              BYTE    $00,$10,$74,$10,$00,$00,$00,$00 ; CHARACTER 16
00697  3088             
00698  3088             ; SCREEN 1 -  SCREEN DATA; VIC BANK 3
00699  3088             *=$9C00
00700  9C00             ; SCREEN 1 -  SCREEN DATA
00701  9C00             _SCREEN_DATA 
00702  9C00  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00703  9C28  20 10 20              BYTE    $20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20
00704  9C50  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00705  9C78  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00706  9CA0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20
00707  9CC8  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20
00708  9CF0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00709  9D18  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00710  9D40  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00711  9D68  20 20 20              BYTE    $20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00712  9D90  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00713  9DB8  20 20 10              BYTE    $20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00714  9DE0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$03,$01,$20
00715  9E08  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00716  9E30  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00717  9E58  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00718  9E80  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00719  9EA8  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00720  9ED0  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00721  9EF8  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00722  9F20  00 02 00              BYTE    $00,$02,$00,$00,$00,$00,$00,$02,$00,$00,$01,$01,$00,$00,$02,$03,$00,$00,$00,$00,$03,$01,$03,$03,$00,$00,$01,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$20
00723  9F48  01 01 00              BYTE    $01,$01,$00,$02,$00,$03,$00,$00,$00,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$01,$00,$00,$01,$00,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$0C,$0D,$01,$00,$00,$20
00724  9F70  00 01 01              BYTE    $00,$01,$01,$01,$01,$01,$01,$01,$01,$0E,$0F,$01,$01,$0E,$0F,$00,$00,$0E,$0F,$00,$01,$00,$00,$01,$01,$00,$0E,$0F,$01,$01,$0E,$0F,$00,$00,$0E,$0F,$01,$00,$00,$20
00725  9F98  00 02 02              BYTE    $00,$02,$02,$00,$01,$01,$03,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$01,$02,$01,$01,$01,$00,$01,$01,$00,$00,$03,$01,$00,$02,$00,$00,$00,$00,$02,$00,$20
00726  9FC0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00727  9FE8             
00728  9FE8             *=$9800
00729  9800             ; SCREEN 1 -  COLOUR DATA
00730  9800             _COLOUR_DATA 
00731  9800  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$0A,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$00,$00,$00,$00,$00,$00,$00
00732  9828  00 0D 00              BYTE    $00,$0D,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$00,$00,$00,$00,$00,$0D,$00
00733  9850  00 00 0D              BYTE    $00,$00,$0D,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0D,$0D,$0E,$0E,$0A,$0A,$00,$00,$00,$00,$00,$00,$00
00734  9878  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$0D,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$00,$00,$00,$00
00735  98A0  00 0A 00              BYTE    $00,$0A,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0D,$00,$00,$00,$00,$00,$00,$00
00736  98C8  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$00,$00,$00,$00,$00,$0D,$00
00737  98F0  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$0A,$0D,$0E,$0E,$0E,$0D,$0E,$0E,$0E,$0E,$0E,$00,$00,$00,$00,$00,$00,$00
00738  9918  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0D,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$00,$00
00739  9940  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00740  9968  0A 0A 0A              BYTE    $0A,$0A,$0A,$0D,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09
00741  9990  0A 0A 0A              BYTE    $0A,$0A,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$0D,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09
00742  99B8  0A 0A 0D              BYTE    $0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$00,$00,$00,$00,$0A,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$00,$09,$09,$09,$09,$09
00743  99E0  0A 0A 0A              BYTE    $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$09,$09,$0D,$09,$09,$09,$09,$09,$09
00744  9A08  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00745  9A30  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00746  9A58  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00747  9A80  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00748  9AA8  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$00,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00749  9AD0  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$00,$0A,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$09,$09,$09
00750  9AF8  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$0D,$0A,$09,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$09,$09,$09
00751  9B20  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00752  9B48  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00753  9B70  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00754  9B98  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00755  9BC0  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00756  9BE8             

******* 21 Label(s) *******
_coconut_horz = $2F80 
_coconut_vert = $2FC0 
_colour_data = $9800 
_pirate_running = $2EC0 
_pirate_standing = $2E80 
_screen_data = $9C00 
_seagull_wings_down = $2F40 
_seagull_wings_up = $2F00 
ADD_TO_X_COORDINATE = $084E 
APPLY_PER_CHAR_COLORS = $08B7 
CHARDATA = $3000 
COPY_SCREEN_DATA_TO_SCREEN_RAM = $0914 
ENABLE_MULTICOLOR_CHAR_MODE = $097B 
INITIALIZE_COCONUT_SPRITE = $0872 
INITIALIZE_PIRATE_SPRITE = $089C 
INITIALIZE_SEAGULL_SPRITE = $0887 
main_game_loop = $0840 
MOVE_256_BYTES = $0971 
REDIRECT_TO_CUSTOM_CHARSET = $08B1 
SET_SHARED_SCREEN_COLORS = $0984 
UPDATE_SEAGULL = $0994 

******* 17 Unused label(s) *******
@choose_wings_down
@choose_wings_up
@clear_hi_bit
@end
@end
@loop
@mod_hi_bit
@movement
@set_hi_bit
_coconut_horz
_coconut_vert
_colour_data
_pirate_running
_pirate_standing
_screen_data
_seagull_wings_down
_seagull_wings_up
APPLY_PER_CHAR_COLORS
CHARDATA
COPY_SCREEN_DATA_TO_SCREEN_RAM
ENABLE_MULTICOLOR_CHAR_MODE
INITIALIZE_COCONUT_SPRITE
INITIALIZE_PIRATE_SPRITE
INITIALIZE_SEAGULL_SPRITE
REDIRECT_TO_CUSTOM_CHARSET
SET_SHARED_SCREEN_COLORS

******* 47 Variable(s) *******
1_16TH_SPEED  = $001F
1_32ND_SPEED  = $003F
1_64TH_SPEED  = $007F
1_8TH_SPEED  = $000F
BLACK  = $0000
BLUE  = $0006
BROWN  = $0009
CHAR_DATA_MULTIPLIER  = $0000
coconut_data_ptr  = $07FA
coconut_horz  = $00BE
coconut_vert  = $00BF
coconut_x_ptr  = $D004
coconut_y_ptr  = $D005
CYAN  = $0003
DEST  = $00C2
DEST_HI  = $00C3
FASTEST_SPEED  = $0001
GREY2  = $000C
HALF_SPEED  = $0003
LOOP_TICK  = $00C4
pirate_data_ptr  = $07F8
pirate_running  = $00BB
pirate_standing  = $00BA
pirate_x_ptr  = $D000
pirate_y_ptr  = $D001
QUARTER_SPEED  = $0007
SCREEN_DATA  = $9C00
SCREEN_RAM  = $0400
sd_block_1  = $9C00
sd_block_2  = $9D00
sd_block_3  = $9E00
sd_block_4  = $9F00
seagull_data_ptr  = $07F9
seagull_wings_down  = $00BD
seagull_wings_up  = $00BC
seagull_x_ptr  = $D002
seagull_y_ptr  = $D003
SLOWEST_SPEED  = $00FF
sprite_data  = $00BA
SPRITE_MASK_BIT_PTR  = $00C8
SRC  = $00C0
SRC_HI  = $00C1
tgt_c64  = $0001
VIOLET  = $0004
WHITE  = $0001
X_COORD_PTR  = $00C5
X_INCREMENT_VALUE_PTR  = $00C7
******* 12 Unused variables(s) *******
1_16TH_SPEED
1_32ND_SPEED
1_64TH_SPEED
1_8TH_SPEED
BLUE
CHAR_DATA_MULTIPLIER
coconut_vert
CYAN
DEST
DEST_HI
HALF_SPEED
pirate_running
QUARTER_SPEED
SCREEN_DATA
SCREEN_RAM
SLOWEST_SPEED
sprite_data
SRC
SRC_HI
tgt_c64
X_INCREMENT_VALUE_PTR

