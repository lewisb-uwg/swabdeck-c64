00001  0000             
00002  0001             
00003  0001             ; 10 SYS (2080)
00004  0001             
00005  0001             ; COLOR CONSTANTS
00006  0001             WHITE=$01
00007  0001             BLACK=$00
00008  0001             GREY2=$0C
00009  0001             VIOLET=$04 
00010  0001             CYAN=$03
00011  0001             BLUE=$06
00012  0001             BROWN=$09
00013  0001             
00014  0001             ; ADDRESSES OF VIC-RELATED STUFF
00015  0001             SCREEN_RAM=$0400 
00016  0001             SCREEN_DATA=$9C00 
00017  0001             CHAR_DATA_MULTIPLIER=($3800/$0800)<<1 
00018  0001             
00019  0001             ; 256-BYTE BLOCKS OF SCREEN DATA, USED
00020  0001             ; TO UNROLL THE SCREEN SETUP AND AVOID
00021  0001             ; NASTY 2-BYTE ADDITION
00022  0001             SD_BLOCK_1 = SCREEN_DATA
00023  0001             SD_BLOCK_2 = SCREEN_DATA + 256
00024  0001             SD_BLOCK_3 = SCREEN_DATA + 512
00025  0001             SD_BLOCK_4 = SCREEN_DATA + 768
00026  0001             
00027  0001             ; START OF SPRITE PIXEL DATA, AS A VIC OFFSET
00028  0001             SPRITE_DATA=$2E80/64 
00029  0001             
00030  0001             ; SPRITE 0 (PIRATE/PLAYER AVATAR) CONSTANTS
00031  0001             PIRATE_DATA_PTR = $07F8
00032  0001             PIRATE_X_PTR = $D000
00033  0001             PIRATE_Y_PTR = $D001
00034  0001             PIRATE_STANDING=SPRITE_DATA 
00035  0001             PIRATE_RUNNING=SPRITE_DATA+1 
00036  0001             
00037  0001             ; SPRITE 1 (SEAGULL) CONSTANTS
00038  0001             SEAGULL_DATA_PTR = $07F9
00039  0001             SEAGULL_WINGS_UP=SPRITE_DATA+2 
00040  0001             SEAGULL_WINGS_DOWN=SPRITE_DATA+3 
00041  0001             SEAGULL_X_PTR = $D002
00042  0001             SEAGULL_Y_PTR = $D003
00043  0001             
00044  0001             ; SPRITE 2 (THE "COCONUT") CONSTANTS
00045  0001             COCONUT_DATA_PTR = $07FA
00046  0001             COCONUT_X_PTR = $D004
00047  0001             COCONUT_Y_PTR = $D005
00048  0001             COCONUT_HORZ=SPRITE_DATA+4 
00049  0001             COCONUT_VERT=SPRITE_DATA+5 
00050  0001             
00051  0001             ; VARIABLES IN THE ZERO PAGE
00052  0001             SRC=$00C0
00053  0001             SRC_HI=SRC+1 
00054  0001             DEST=SRC_HI+1 
00055  0001             DEST_HI=DEST+1 
00056  0001             LOOP_TICK=DEST_HI+1 
00057  0001             
00058  0001             ; ANIMATION/MOTION SPEED CONSTANTS
00059  0001             ; THE IDEA HERE IS THE MAIN LOOP OPERATES ON A WRAP-AROUND TICK OF 256.
00060  0001             ; THE 1'S PATTERNS HERE DETERMINE THE SPEED, E.G., FASTEST_SPEED HAPPENS
00061  0001             ; EVERY-OTHER TICK, HALF_SPEED EVERY FOURTH TICK, ETC.
00062  0001             FASTEST_SPEED = %00000001
00063  0001             HALF_SPEED = %00000011
00064  0001             QUARTER_SPEED = %00000111
00065  0001             1_8TH_SPEED = %00001111
00066  0001             1_16TH_SPEED = %00011111
00067  0001             1_32ND_SPEED = %00111111
00068  0001             1_64TH_SPEED = %01111111
00069  0001             SLOWEST_SPEED = %11111111
00070  0001             
00071  0001             ; ADVANCES THE SEAGULL TO THE RIGHT (WRAPPING IF NECESSARY),
00072  0001             ; AND SWITCHES BETWEEN ANIMATION FRAMES
00073  0001             ; /1 : CURRENT LOOP TICK
00074  0001             ; /2 : ANIMATION SPEED
00075  0001             ; /3 : MOVEMENT SPEED
00076  0001             DEFM       UPDATE_SEAGULL
00077  0001                        ; SWITCH ANIMATION FRAME
00078  0001                        LDA /1  ; LOAD CURRENT TICK
00079  0001                        AND #/2 ; AND WITH THE SPEED
00080  0001                        CMP #/2 ; SEE IF THE RESULT MATCHES THE SPEED
00081  0001                        BNE @MOVEMENT ; SKIP ANIMATION ON NO MATCH (IT'S NOT YET TIME TO FIRE)
00082  0001                        
00083  0001                        ; PERFORM THE ANIMATION
00084  0001             
00085  0001                        ; PICK THE APPROPRIATE ANIMATION, BASED ON CONTENTS
00086  0001                        ; OF SEAGULL_DATA_PTR
00087  0001                        LDA SEAGULL_DATA_PTR
00088  0001                        CMP #SEAGULL_WINGS_UP
00089  0001                        BEQ @CHOOSE_WINGS_DOWN
00090  0001             @CHOOSE_WINGS_UP 
00091  0001                        LDA #SEAGULL_WINGS_UP
00092  0001                        STA SEAGULL_DATA_PTR
00093  0001                        JMP @MOVEMENT
00094  0001             
00095  0001             @CHOOSE_WINGS_DOWN 
00096  0001                        LDA #SEAGULL_WINGS_DOWN
00097  0001                        STA SEAGULL_DATA_PTR
00098  0001                        JMP @MOVEMENT
00099  0001             
00100  0001             @MOVEMENT
00101  0001                        NOP
00102  0001                        ENDM
00103  0001             
00104  0001             ; /1 : DESTINATION ADDRESS
00105  0001             ; /2 : IMMEDIATE VALUE (SANS #)
00106  0001             DEFM       STORE_2_BYTE_VALUE
00107  0001                        ; STORE THE LOW BYTE
00108  0001                        LDA #</2
00109  0001                        STA /1
00110  0001             
00111  0001                        ; STORE THE HI BYTE
00112  0001                        LDY #1
00113  0001                        LDA #>/2
00114  0001                        STA /1,Y
00115  0001                        ENDM
00116  0001             
00117  0001             ; /1 : SRC ADDRESS
00118  0001             DEFM       SET_SRC
00119  0001                        LDY #0
00120  0001                        LDA #>/1
00121  0001                        STA SRC_HI
00122  0001                        LDA #</1
00123  0001                        STA SRC
00124  0001                        ENDM
00125  0001             
00126  0001             ; /1 : DEST ADDRESS
00127  0001             DEFM       SET_DEST
00128  0001                        LDY #0
00129  0001                        LDA #>/1
00130  0001                        STA DEST_HI
00131  0001                        LDA #</1
00132  0001                        STA DEST
00133  0001                        ENDM
00134  0001             
00135  0001             DEFM       ENABLE_SPRITES
00136  0001                        ; ALL SPRITES WERE DESIGNED AS MULTICOLOR,
00137  0001                        ; EVEN THOUGH 1 AND 2 ONLY USE A SINGLE COLOR
00138  0001                        LDA #$07
00139  0001                        STA $D01C
00140  0001             
00141  0001                        ; TURN ON SPRITES 0, 1, AND 2
00142  0001                        LDA #$07
00143  0001                        STA $D015
00144  0001                        ENDM
00145  0001             
00146  0001             DEFM       SET_COMMON_MULTICOLOR_SPRITE_COLORS
00147  0001                        ; 01 SHARED COLOR #0
00148  0001                        LDA #CYAN
00149  0001                        STA $D025
00150  0001             
00151  0001                        ; 11 SHARED COLOR #1
00152  0001                        LDA #BLUE
00153  0001                        STA $D026
00154  0001             
00155  0001                        ENDM
00156  0001             
00157  0001             ; 10 SYS (2049)
00158  0001             
00159  0001             ; 10 SYS (2064)
00160  0001             
00161  0001             *=$0801
00162  0801             
00163  0801  0E 08 0A              BYTE    $0E, $08, $0A, $00, $9E, $20, $28,  $32, $30, $36, $34, $29, $00, $00, $00
00164  0810             
00165  0810             
00166  0810             
00167  0810             ; PROGRAM ENTRANCE
00168  0810             *=$0810
00169  0810             
00170  0810                        ; SETUP PHASE
00171  0810  20 0D 09              JSR COPY_SCREEN_DATA_TO_SCREEN_RAM
00172  0813  20 74 09              JSR ENABLE_MULTICOLOR_CHAR_MODE
00173  0816  20 7D 09              JSR SET_SHARED_SCREEN_COLORS
00174  0819  20 AA 08              JSR REDIRECT_TO_CUSTOM_CHARSET
00175  081C  20 B0 08              JSR APPLY_PER_CHAR_COLORS
00176  081F  20 95 08              JSR INITIALIZE_PIRATE_SPRITE
00177  0822  20 80 08              JSR INITIALIZE_SEAGULL_SPRITE
00178  0825  20 6B 08              JSR INITIALIZE_COCONUT_SPRITE
00179  0828             
00180  0828             
00181  0828  A9 03                 LDA #CYAN
00182  082A  8D 25 D0              STA $D025
00183  082D             
00184  082D  A9 06                 LDA #BLUE
00185  082F  8D 26 D0              STA $D026
00186  0832             
00187  0832             
00188  0832             
00189  0832             
00190  0832             
00191  0832  A9 07                 LDA #$07
00192  0834  8D 1C D0              STA $D01C
00193  0837             
00194  0837  A9 07                 LDA #$07
00195  0839  8D 15 D0              STA $D015
00196  083C             
00197  083C             
00198  083C             
00199  083C             
00200  083C                        ; MAIN GAME LOOP
00201  083C  A9 00                 LDA #$00
00202  083E  85 C4                 STA LOOP_TICK ; INIT LOOP TICK TO ZERO
00203  0840             MAIN_GAME_LOOP 
00204  0840                        ; UPDATE THE PIRATE'S LOCATION AND ANIMATION
00205  0840             
00206  0840                        ; UPDATE THE SEAGULL'S LOCATION AND ANIMATION
00207  0840             
00208  0840             
00209  0840  A5 C4                 LDA LOOP_TICK
00210  0842  29 FF                 AND #SLOWEST_SPEED
00211  0844  C9 FF                 CMP #SLOWEST_SPEED
00212  0846  D0 17                 BNE @MOVEMENT
00213  0848                        
00214  0848             
00215  0848  AD F9 07              LDA SEAGULL_DATA_PTR
00216  084B  C9 BC                 CMP #SEAGULL_WINGS_UP
00217  084D  F0 08                 BEQ @CHOOSE_WINGS_DOWN
00218  084F             @CHOOSE_WINGS_UP 
00219  084F  A9 BC                 LDA #SEAGULL_WINGS_UP
00220  0851  8D F9 07              STA SEAGULL_DATA_PTR
00221  0854  4C 5F 08              JMP @MOVEMENT
00222  0857             
00223  0857             @CHOOSE_WINGS_DOWN 
00224  0857  A9 BD                 LDA #SEAGULL_WINGS_DOWN
00225  0859  8D F9 07              STA SEAGULL_DATA_PTR
00226  085C  4C 5F 08              JMP @MOVEMENT
00227  085F             
00228  085F             @MOVEMENT
00229  085F  EA                    NOP
00230  0860             
00231  0860             
00232  0860             
00233  0860             
00234  0860             
00235  0860                        ; UPDATE THE COCONUT'S LOCATION AND ANIMATION
00236  0860             
00237  0860                        ; INCREMENT THE LOOP TICK (NOTE IT ROLLS OVER AUTOMATICALLY)
00238  0860  A5 C4                 LDA LOOP_TICK
00239  0862  69 01                 ADC #1
00240  0864  85 C4                 STA LOOP_TICK
00241  0866             
00242  0866                        ; FOR NOW, INFINITE GAME LOOP
00243  0866  A9 00                 LDA #0
00244  0868  F0 D6                 BEQ MAIN_GAME_LOOP
00245  086A             
00246  086A  60                    RTS
00247  086B             
00248  086B             INITIALIZE_COCONUT_SPRITE ; SPRITE 2
00249  086B                        ; SET THE COCONUT'S 10 COLOR
00250  086B  A9 01                 LDA #WHITE
00251  086D  8D 29 D0              STA $D029
00252  0870             
00253  0870                        ; TELL VIC WHERE THE FIRST COCONUT FRAME IS
00254  0870  A9 BE                 LDA #COCONUT_HORZ
00255  0872  8D FA 07              STA COCONUT_DATA_PTR
00256  0875                        
00257  0875                        ; INITAL COCONUT X (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00258  0875  A9 3C                 LDA #60
00259  0877  8D 04 D0              STA COCONUT_X_PTR
00260  087A             
00261  087A                        ; INITIAL COCONUT Y (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00262  087A  A9 64                 LDA #100
00263  087C  8D 05 D0              STA COCONUT_Y_PTR
00264  087F  60                    RTS
00265  0880             
00266  0880             INITIALIZE_SEAGULL_SPRITE ; SPRITE 1
00267  0880                        ; SET THE GULL'S 10 COLOR
00268  0880  A9 01                 LDA #WHITE
00269  0882  8D 28 D0              STA $D028
00270  0885             
00271  0885                        ; TELL VIC WHERE THE FIRST GULL FRAME IS
00272  0885  A9 BD                 LDA #SEAGULL_WINGS_DOWN
00273  0887  8D F9 07              STA SEAGULL_DATA_PTR
00274  088A             
00275  088A                        ; INITIAL GULL X (TODO: CHANGE ONCE ANIMATIONS BEGIN)
00276  088A  A9 3C                 LDA #60
00277  088C  8D 02 D0              STA SEAGULL_X_PTR
00278  088F             
00279  088F                        ; INITIAL GULL Y (NOTE: SHOULD NEVER CHANGE)
00280  088F  A9 32                 LDA #50
00281  0891  8D 03 D0              STA SEAGULL_Y_PTR
00282  0894  60                    RTS
00283  0895             
00284  0895             INITIALIZE_PIRATE_SPRITE ; SPRITE 2
00285  0895                        ; SET THE PIRATE'S 10 COLOR
00286  0895  A9 09                 LDA #BROWN
00287  0897  8D 27 D0              STA $D027
00288  089A             
00289  089A                        ; TELL VIC WHERE THE FIRST PIRATE FRAME IS
00290  089A  A9 BA                 LDA #PIRATE_STANDING
00291  089C  8D F8 07              STA PIRATE_DATA_PTR
00292  089F             
00293  089F                        ; INITIAL PIRATE X
00294  089F  A9 3C                 LDA #60
00295  08A1  8D 00 D0              STA PIRATE_X_PTR
00296  08A4             
00297  08A4                        ; INITIAL PIRATE Y (NOTE: SHOULD NEVER CHANGE)
00298  08A4  A9 BC                 LDA #188
00299  08A6  8D 01 D0              STA PIRATE_Y_PTR
00300  08A9  60                    RTS
00301  08AA                        
00302  08AA             REDIRECT_TO_CUSTOM_CHARSET 
00303  08AA  A9 1C                 LDA #28
00304  08AC  8D 18 D0              STA $D018
00305  08AF  60                    RTS
00306  08B0             
00307  08B0             APPLY_PER_CHAR_COLORS 
00308  08B0             
00309  08B0             
00310  08B0  A0 00                 LDY #0
00311  08B2  A9 D8                 LDA #>$D800
00312  08B4  85 C3                 STA DEST_HI
00313  08B6  A9 00                 LDA #<$D800
00314  08B8  85 C2                 STA DEST
00315  08BA             
00316  08BA             
00317  08BA  A0 00                 LDY #0
00318  08BC  A9 98                 LDA #>$9800
00319  08BE  85 C1                 STA SRC_HI
00320  08C0  A9 00                 LDA #<$9800
00321  08C2  85 C0                 STA SRC
00322  08C4  20 6A 09              JSR MOVE_256_BYTES
00323  08C7             
00324  08C7             
00325  08C7             
00326  08C7  A0 00                 LDY #0
00327  08C9  A9 D9                 LDA #>$D900
00328  08CB  85 C3                 STA DEST_HI
00329  08CD  A9 00                 LDA #<$D900
00330  08CF  85 C2                 STA DEST
00331  08D1             
00332  08D1             
00333  08D1  A0 00                 LDY #0
00334  08D3  A9 99                 LDA #>$9900
00335  08D5  85 C1                 STA SRC_HI
00336  08D7  A9 00                 LDA #<$9900
00337  08D9  85 C0                 STA SRC
00338  08DB  20 6A 09              JSR MOVE_256_BYTES
00339  08DE             
00340  08DE             
00341  08DE             
00342  08DE  A0 00                 LDY #0
00343  08E0  A9 DA                 LDA #>$DA00
00344  08E2  85 C3                 STA DEST_HI
00345  08E4  A9 00                 LDA #<$DA00
00346  08E6  85 C2                 STA DEST
00347  08E8             
00348  08E8             
00349  08E8  A0 00                 LDY #0
00350  08EA  A9 9A                 LDA #>$9A00
00351  08EC  85 C1                 STA SRC_HI
00352  08EE  A9 00                 LDA #<$9A00
00353  08F0  85 C0                 STA SRC
00354  08F2  20 6A 09              JSR MOVE_256_BYTES
00355  08F5             
00356  08F5             
00357  08F5             
00358  08F5  A0 00                 LDY #0
00359  08F7  A9 DB                 LDA #>$DB00
00360  08F9  85 C3                 STA DEST_HI
00361  08FB  A9 00                 LDA #<$DB00
00362  08FD  85 C2                 STA DEST
00363  08FF             
00364  08FF             
00365  08FF  A0 00                 LDY #0
00366  0901  A9 9B                 LDA #>$9B00
00367  0903  85 C1                 STA SRC_HI
00368  0905  A9 00                 LDA #<$9B00
00369  0907  85 C0                 STA SRC
00370  0909  20 6A 09              JSR MOVE_256_BYTES
00371  090C             
00372  090C  60                    RTS
00373  090D             
00374  090D             ; COPIES _SCREEN_DATA TO THE THE SCREEN RAM AT $0400
00375  090D             ; EVEN THOUGH SCREEN DATA IS ONLY 1000 BYTES, IT WILL COPY 1024!!!
00376  090D             COPY_SCREEN_DATA_TO_SCREEN_RAM 
00377  090D                        ; FIRST 256-BYTE BLOCK IS $0400-$04FF, FROM
00378  090D             
00379  090D             
00380  090D  A0 00                 LDY #0
00381  090F  A9 04                 LDA #>$0400
00382  0911  85 C3                 STA DEST_HI
00383  0913  A9 00                 LDA #<$0400
00384  0915  85 C2                 STA DEST
00385  0917             
00386  0917             
00387  0917  A0 00                 LDY #0
00388  0919  A9 9C                 LDA #>SD_BLOCK_1
00389  091B  85 C1                 STA SRC_HI
00390  091D  A9 00                 LDA #<SD_BLOCK_1
00391  091F  85 C0                 STA SRC
00392  0921  20 6A 09              JSR MOVE_256_BYTES
00393  0924                        
00394  0924                        ; SECOND 256-BYTE BLOCK IS $0500-$05FF
00395  0924             
00396  0924             
00397  0924  A0 00                 LDY #0
00398  0926  A9 05                 LDA #>$0500
00399  0928  85 C3                 STA DEST_HI
00400  092A  A9 00                 LDA #<$0500
00401  092C  85 C2                 STA DEST
00402  092E             
00403  092E             
00404  092E  A0 00                 LDY #0
00405  0930  A9 9D                 LDA #>SD_BLOCK_2
00406  0932  85 C1                 STA SRC_HI
00407  0934  A9 00                 LDA #<SD_BLOCK_2
00408  0936  85 C0                 STA SRC
00409  0938  20 6A 09              JSR MOVE_256_BYTES
00410  093B             
00411  093B                        ; THIRD 256-BYTE BLOCK IS $0600-$06FF
00412  093B             
00413  093B             
00414  093B  A0 00                 LDY #0
00415  093D  A9 06                 LDA #>$0600
00416  093F  85 C3                 STA DEST_HI
00417  0941  A9 00                 LDA #<$0600
00418  0943  85 C2                 STA DEST
00419  0945             
00420  0945             
00421  0945  A0 00                 LDY #0
00422  0947  A9 9E                 LDA #>SD_BLOCK_3
00423  0949  85 C1                 STA SRC_HI
00424  094B  A9 00                 LDA #<SD_BLOCK_3
00425  094D  85 C0                 STA SRC
00426  094F  20 6A 09              JSR MOVE_256_BYTES
00427  0952             
00428  0952                        ; FOURTH 256-BYTE BLOCK IS $0700-$07FF
00429  0952             
00430  0952             
00431  0952  A0 00                 LDY #0
00432  0954  A9 07                 LDA #>$0700
00433  0956  85 C3                 STA DEST_HI
00434  0958  A9 00                 LDA #<$0700
00435  095A  85 C2                 STA DEST
00436  095C             
00437  095C             
00438  095C  A0 00                 LDY #0
00439  095E  A9 9F                 LDA #>SD_BLOCK_4
00440  0960  85 C1                 STA SRC_HI
00441  0962  A9 00                 LDA #<SD_BLOCK_4
00442  0964  85 C0                 STA SRC
00443  0966  20 6A 09              JSR MOVE_256_BYTES
00444  0969             
00445  0969  60                    RTS
00446  096A             
00447  096A             ; COPIES 256 TYES FROM SRC TO DEST
00448  096A             ; SRC: FIRST (LOW) BYTE OF ADDRESS CONTAINING THE SOURCE ADDRESS
00449  096A             ; DEST: FIRST (LOW) BYTE OF ADDRESS CONTAINING THE DESTINATION ADDRESS
00450  096A             ; CORRUPTS REGISTERS A AND Y
00451  096A             MOVE_256_BYTES 
00452  096A  A0 00                 LDY #0
00453  096C  B1 C0      @LOOP      LDA (SRC),Y
00454  096E  91 C2                 STA (DEST),Y
00455  0970  C8                    INY ; NOTE THAT THIS WILL ROLLOVER TO ZERO AT "Y=256"
00456  0971  D0 F9                 BNE @LOOP
00457  0973  60                    RTS
00458  0974             
00459  0974             
00460  0974             
00461  0974             ; LDA WILL BE CORRUPTED
00462  0974             ENABLE_MULTICOLOR_CHAR_MODE 
00463  0974  AD 16 D0              LDA $D016
00464  0977  09 10                 ORA #16
00465  0979  8D 16 D0              STA $D016
00466  097C  60                    RTS
00467  097D             
00468  097D             ; LDA WILL BE CORRUPTED
00469  097D             SET_SHARED_SCREEN_COLORS 
00470  097D                        ; SET THE 00 COLOR
00471  097D  A9 00                 LDA #BLACK
00472  097F  8D 21 D0              STA $D021
00473  0982             
00474  0982                        ; SET THE 01 COLOR
00475  0982  A9 0C                 LDA #GREY2
00476  0984  8D 22 D0              STA $D022
00477  0987             
00478  0987                        ; SET THE 10 COLOR
00479  0987  A9 04                 LDA #VIOLET
00480  0989  8D 23 D0              STA $D023
00481  098C             
00482  098C  60                    RTS
00483  098D             
00484  098D             *=$2E80
00485  2E80             ; PIRATE_STANDING
00486  2E80             _PIRATE_STANDING 
00487  2E80  0A 80 00              BYTE $0A,$80,$00
00488  2E83  2A A0 00              BYTE $2A,$A0,$00
00489  2E86  2A A0 00              BYTE $2A,$A0,$00
00490  2E89  AA A0 00              BYTE $AA,$A0,$00
00491  2E8C  87 50 00              BYTE $87,$50,$00
00492  2E8F  85 50 00              BYTE $85,$50,$00
00493  2E92  05 40 00              BYTE $05,$40,$00
00494  2E95  0F C0 00              BYTE $0F,$C0,$00
00495  2E98  2F E0 00              BYTE $2F,$E0,$00
00496  2E9B  AF E8 00              BYTE $AF,$E8,$00
00497  2E9E  97 E8 00              BYTE $97,$E8,$00
00498  2EA1  A5 E8 00              BYTE $A5,$E8,$00
00499  2EA4  AA 6A 00              BYTE $AA,$6A,$00
00500  2EA7  AA 9A 00              BYTE $AA,$9A,$00
00501  2EAA  3F D6 00              BYTE $3F,$D6,$00
00502  2EAD  3F F5 00              BYTE $3F,$F5,$00
00503  2EB0  0F C1 40              BYTE $0F,$C1,$40
00504  2EB3  2B A0 50              BYTE $2B,$A0,$50
00505  2EB6  28 A0 D7              BYTE $28,$A0,$D7
00506  2EB9  A8 A0 D7              BYTE $A8,$A0,$D7
00507  2EBC  A8 A3 55              BYTE $A8,$A3,$55
00508  2EBF  00                    BYTE $00
00509  2EC0             
00510  2EC0             ; PIRATE_RUNNING
00511  2EC0             _PIRATE_RUNNING 
00512  2EC0  00 A8 00              BYTE $00,$A8,$00
00513  2EC3  02 AA 00              BYTE $02,$AA,$00
00514  2EC6  02 AA 00              BYTE $02,$AA,$00
00515  2EC9  0A AA 00              BYTE $0A,$AA,$00
00516  2ECC  08 75 00              BYTE $08,$75,$00
00517  2ECF  08 55 00              BYTE $08,$55,$00
00518  2ED2  00 54 00              BYTE $00,$54,$00
00519  2ED5  01 FC 00              BYTE $01,$FC,$00
00520  2ED8  01 FA 00              BYTE $01,$FA,$00
00521  2EDB  09 7A 00              BYTE $09,$7A,$00
00522  2EDE  0A AE 00              BYTE $0A,$AE,$00
00523  2EE1  0A A6 00              BYTE $0A,$A6,$00
00524  2EE4  03 D6 00              BYTE $03,$D6,$00
00525  2EE7  03 F6 80              BYTE $03,$F6,$80
00526  2EEA  03 F6 80              BYTE $03,$F6,$80
00527  2EED  03 FD C0              BYTE $03,$FD,$C0
00528  2EF0  0A FD 40              BYTE $0A,$FD,$40
00529  2EF3  2A 3A 40              BYTE $2A,$3A,$40
00530  2EF6  28 0A 40              BYTE $28,$0A,$40
00531  2EF9  28 02 50              BYTE $28,$02,$50
00532  2EFC  28 0D 54              BYTE $28,$0D,$54
00533  2EFF  00                    BYTE $00
00534  2F00             
00535  2F00             ; SEAGULL_WINGS_UP
00536  2F00             _SEAGULL_WINGS_UP 
00537  2F00  00 00 00              BYTE $00,$00,$00
00538  2F03  00 50 00              BYTE $00,$50,$00
00539  2F06  01 54 00              BYTE $01,$54,$00
00540  2F09  05 55 00              BYTE $05,$55,$00
00541  2F0C  15 05 00              BYTE $15,$05,$00
00542  2F0F  00 05 40              BYTE $00,$05,$40
00543  2F12  00 15 04              BYTE $00,$15,$04
00544  2F15  01 55 55              BYTE $01,$55,$55
00545  2F18  55 55 54              BYTE $55,$55,$54
00546  2F1B  05 55 50              BYTE $05,$55,$50
00547  2F1E  01 55 00              BYTE $01,$55,$00
00548  2F21  05 40 00              BYTE $05,$40,$00
00549  2F24  04 00 00              BYTE $04,$00,$00
00550  2F27  00 00 00              BYTE $00,$00,$00
00551  2F2A  00 00 00              BYTE $00,$00,$00
00552  2F2D  00 00 00              BYTE $00,$00,$00
00553  2F30  00 00 00              BYTE $00,$00,$00
00554  2F33  00 00 00              BYTE $00,$00,$00
00555  2F36  00 00 00              BYTE $00,$00,$00
00556  2F39  00 00 00              BYTE $00,$00,$00
00557  2F3C  00 00 00              BYTE $00,$00,$00
00558  2F3F  00                    BYTE $00
00559  2F40             
00560  2F40             ; SEAGULL_WINGS_DOWN
00561  2F40             _SEAGULL_WINGS_DOWN 
00562  2F40  00 00 00              BYTE $00,$00,$00
00563  2F43  00 00 00              BYTE $00,$00,$00
00564  2F46  00 00 00              BYTE $00,$00,$00
00565  2F49  00 00 00              BYTE $00,$00,$00
00566  2F4C  00 00 00              BYTE $00,$00,$00
00567  2F4F  00 00 04              BYTE $00,$00,$04
00568  2F52  00 00 05              BYTE $00,$00,$05
00569  2F55  01 55 54              BYTE $01,$55,$54
00570  2F58  55 55 54              BYTE $55,$55,$54
00571  2F5B  05 55 50              BYTE $05,$55,$50
00572  2F5E  01 55 00              BYTE $01,$55,$00
00573  2F61  01 54 00              BYTE $01,$54,$00
00574  2F64  00 50 00              BYTE $00,$50,$00
00575  2F67  01 40 00              BYTE $01,$40,$00
00576  2F6A  05 00 00              BYTE $05,$00,$00
00577  2F6D  00 00 00              BYTE $00,$00,$00
00578  2F70  00 00 00              BYTE $00,$00,$00
00579  2F73  00 00 00              BYTE $00,$00,$00
00580  2F76  00 00 00              BYTE $00,$00,$00
00581  2F79  00 00 00              BYTE $00,$00,$00
00582  2F7C  00 00 00              BYTE $00,$00,$00
00583  2F7F  00                    BYTE $00
00584  2F80             
00585  2F80             ; COCONUT_HORZ
00586  2F80             _COCONUT_HORZ 
00587  2F80  00 00 00              BYTE $00,$00,$00
00588  2F83  00 00 00              BYTE $00,$00,$00
00589  2F86  00 00 00              BYTE $00,$00,$00
00590  2F89  00 00 00              BYTE $00,$00,$00
00591  2F8C  00 00 00              BYTE $00,$00,$00
00592  2F8F  00 00 00              BYTE $00,$00,$00
00593  2F92  00 00 00              BYTE $00,$00,$00
00594  2F95  00 00 00              BYTE $00,$00,$00
00595  2F98  00 00 00              BYTE $00,$00,$00
00596  2F9B  00 00 00              BYTE $00,$00,$00
00597  2F9E  00 00 00              BYTE $00,$00,$00
00598  2FA1  00 00 00              BYTE $00,$00,$00
00599  2FA4  00 00 00              BYTE $00,$00,$00
00600  2FA7  00 00 00              BYTE $00,$00,$00
00601  2FAA  00 00 00              BYTE $00,$00,$00
00602  2FAD  00 2A 00              BYTE $00,$2A,$00
00603  2FB0  00 AA 80              BYTE $00,$AA,$80
00604  2FB3  00 AA 80              BYTE $00,$AA,$80
00605  2FB6  00 AA 80              BYTE $00,$AA,$80
00606  2FB9  00 2A 00              BYTE $00,$2A,$00
00607  2FBC  00 00 00              BYTE $00,$00,$00
00608  2FBF  00                    BYTE $00
00609  2FC0             
00610  2FC0             ; COCONUT_VERT
00611  2FC0             _COCONUT_VERT 
00612  2FC0  00 00 00              BYTE $00,$00,$00
00613  2FC3  00 00 00              BYTE $00,$00,$00
00614  2FC6  00 00 00              BYTE $00,$00,$00
00615  2FC9  00 00 00              BYTE $00,$00,$00
00616  2FCC  00 00 00              BYTE $00,$00,$00
00617  2FCF  00 00 00              BYTE $00,$00,$00
00618  2FD2  00 00 00              BYTE $00,$00,$00
00619  2FD5  00 00 00              BYTE $00,$00,$00
00620  2FD8  00 00 00              BYTE $00,$00,$00
00621  2FDB  00 00 00              BYTE $00,$00,$00
00622  2FDE  00 00 00              BYTE $00,$00,$00
00623  2FE1  00 00 00              BYTE $00,$00,$00
00624  2FE4  00 00 00              BYTE $00,$00,$00
00625  2FE7  00 00 00              BYTE $00,$00,$00
00626  2FEA  00 08 00              BYTE $00,$08,$00
00627  2FED  00 2A 00              BYTE $00,$2A,$00
00628  2FF0  00 2A 00              BYTE $00,$2A,$00
00629  2FF3  00 2A 00              BYTE $00,$2A,$00
00630  2FF6  00 2A 00              BYTE $00,$2A,$00
00631  2FF9  00 2A 00              BYTE $00,$2A,$00
00632  2FFC  00 08 00              BYTE $00,$08,$00
00633  2FFF  00                    BYTE $00
00634  3000             
00635  3000             
00636  3000             *=$3000
00637  3000             CHARDATA
00638  3000  AA FF 5F              BYTE    $AA,$FF,$5F,$FF,$FF,$F7,$FF,$AA ; CHARACTER 0
00639  3008  AA FF FF              BYTE    $AA,$FF,$FF,$DF,$FF,$FD,$7F,$AA ; CHARACTER 1
00640  3010  AA FE FE              BYTE    $AA,$FE,$FE,$7E,$FE,$FE,$F6,$AA ; CHARACTER 2
00641  3018  AA BF BF              BYTE    $AA,$BF,$BF,$BD,$BF,$BF,$9F,$AA ; CHARACTER 3
00642  3020  96 96 96              BYTE    $96,$96,$96,$96,$96,$96,$96,$96 ; CHARACTER 4
00643  3028  FF FF FF              BYTE    $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; CHARACTER 5
00644  3030  03 03 0F              BYTE    $03,$03,$0F,$0F,$3F,$3F,$FF,$FF ; CHARACTER 6
00645  3038  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$0F,$0F,$0F,$0F ; CHARACTER 7
00646  3040  03 03 03              BYTE    $03,$03,$03,$03,$0F,$0F,$0F,$0F ; CHARACTER 8
00647  3048  0F 0F 0F              BYTE    $0F,$0F,$0F,$0F,$03,$03,$03,$03 ; CHARACTER 9
00648  3050  FF FF 3F              BYTE    $FF,$FF,$3F,$3F,$0F,$0F,$03,$03 ; CHARACTER 10
00649  3058  3F 3F 3F              BYTE    $3F,$3F,$3F,$3F,$3F,$3F,$3F,$3F ; CHARACTER 11
00650  3060  F0 F0 C0              BYTE    $F0,$F0,$C0,$C0,$C0,$00,$00,$00 ; CHARACTER 12
00651  3068  0F 0F 03              BYTE    $0F,$0F,$03,$03,$03,$00,$00,$00 ; CHARACTER 13
00652  3070  00 00 00              BYTE    $00,$00,$00,$C0,$C0,$C0,$F0,$F0 ; CHARACTER 14
00653  3078  00 00 00              BYTE    $00,$00,$00,$03,$03,$03,$0F,$0F ; CHARACTER 15
00654  3080  00 10 74              BYTE    $00,$10,$74,$10,$00,$00,$00,$00 ; CHARACTER 16
00655  3088             
00656  3088             ; SCREEN 1 -  SCREEN DATA; VIC BANK 3
00657  3088             *=$9C00
00658  9C00             ; SCREEN 1 -  SCREEN DATA
00659  9C00             _SCREEN_DATA 
00660  9C00  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00661  9C28  20 10 20              BYTE    $20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20
00662  9C50  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00663  9C78  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00664  9CA0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20
00665  9CC8  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20
00666  9CF0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00667  9D18  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00668  9D40  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00669  9D68  20 20 20              BYTE    $20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00670  9D90  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00671  9DB8  20 20 10              BYTE    $20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00672  9DE0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$10,$20,$20,$20,$03,$01,$20
00673  9E08  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00674  9E30  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00675  9E58  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00676  9E80  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00677  9EA8  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00678  9ED0  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00679  9EF8  00 00 02              BYTE    $00,$00,$02,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$03,$01,$20
00680  9F20  00 02 00              BYTE    $00,$02,$00,$00,$00,$00,$00,$02,$00,$00,$01,$01,$00,$00,$02,$03,$00,$00,$00,$00,$03,$01,$03,$03,$00,$00,$01,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00,$20
00681  9F48  01 01 00              BYTE    $01,$01,$00,$02,$00,$03,$00,$00,$00,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$01,$00,$00,$01,$00,$0C,$0D,$01,$01,$0C,$0D,$01,$01,$0C,$0D,$01,$00,$00,$20
00682  9F70  00 01 01              BYTE    $00,$01,$01,$01,$01,$01,$01,$01,$01,$0E,$0F,$01,$01,$0E,$0F,$00,$00,$0E,$0F,$00,$01,$00,$00,$01,$01,$00,$0E,$0F,$01,$01,$0E,$0F,$00,$00,$0E,$0F,$01,$00,$00,$20
00683  9F98  00 02 02              BYTE    $00,$02,$02,$00,$01,$01,$03,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$00,$00,$01,$02,$01,$01,$01,$00,$01,$01,$00,$00,$03,$01,$00,$02,$00,$00,$00,$00,$02,$00,$20
00684  9FC0  20 20 20              BYTE    $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
00685  9FE8             
00686  9FE8             *=$9800
00687  9800             ; SCREEN 1 -  COLOUR DATA
00688  9800             _COLOUR_DATA 
00689  9800  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$0A,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$00,$00,$00,$00,$00,$00,$00
00690  9828  00 0D 00              BYTE    $00,$0D,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$00,$00,$00,$00,$00,$0D,$00
00691  9850  00 00 0D              BYTE    $00,$00,$0D,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0D,$0D,$0E,$0E,$0A,$0A,$00,$00,$00,$00,$00,$00,$00
00692  9878  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$0D,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$00,$00,$00,$00
00693  98A0  00 0A 00              BYTE    $00,$0A,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$0A,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$0D,$00,$00,$00,$00,$00,$00,$00
00694  98C8  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0A,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0A,$00,$00,$00,$00,$00,$0D,$00
00695  98F0  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$0A,$0D,$0E,$0E,$0E,$0D,$0E,$0E,$0E,$0E,$0E,$00,$00,$00,$00,$00,$00,$00
00696  9918  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0E,$0D,$00,$00,$00,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$00,$00,$00,$00
00697  9940  00 00 00              BYTE    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00698  9968  0A 0A 0A              BYTE    $0A,$0A,$0A,$0D,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09
00699  9990  0A 0A 0A              BYTE    $0A,$0A,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$0D,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09
00700  99B8  0A 0A 0D              BYTE    $0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$00,$00,$00,$00,$0A,$0D,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$0A,$0A,$0A,$00,$09,$09,$09,$09,$09
00701  99E0  0A 0A 0A              BYTE    $0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$00,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$0A,$0A,$09,$09,$0D,$09,$09,$09,$09,$09,$09
00702  9A08  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0A,$0A,$0A,$0A,$0A,$0A,$0D,$0A,$0A,$0A,$0A,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00703  9A30  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00704  9A58  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00705  9A80  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00706  9AA8  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$00,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$09,$09,$09
00707  9AD0  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$00,$0A,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$0D,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$09,$09,$09
00708  9AF8  09 09 09              BYTE    $09,$09,$09,$00,$00,$00,$00,$00,$0D,$0A,$09,$0A,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$00,$00,$09,$09,$09
00709  9B20  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00710  9B48  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00711  9B70  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00712  9B98  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00713  9BC0  09 09 09              BYTE    $09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09,$09
00714  9BE8             

******* 22 Label(s) *******
_coconut_horz = $2F80 
_coconut_vert = $2FC0 
_colour_data = $9800 
_pirate_running = $2EC0 
_pirate_standing = $2E80 
_screen_data = $9C00 
_seagull_wings_down = $2F40 
_seagull_wings_up = $2F00 
~~~choose_wings_down{00002} = $0857 
~~~choose_wings_up{00002} = $084F 
~~~movement{00002} = $085F 
APPLY_PER_CHAR_COLORS = $08B0 
CHARDATA = $3000 
COPY_SCREEN_DATA_TO_SCREEN_RAM = $090D 
ENABLE_MULTICOLOR_CHAR_MODE = $0974 
INITIALIZE_COCONUT_SPRITE = $086B 
INITIALIZE_PIRATE_SPRITE = $0895 
INITIALIZE_SEAGULL_SPRITE = $0880 
main_game_loop = $0840 
MOVE_256_BYTES = $096A 
REDIRECT_TO_CUSTOM_CHARSET = $08AA 
SET_SHARED_SCREEN_COLORS = $097D 

******* 20 Unused label(s) *******
@loop
_coconut_horz
_coconut_vert
_colour_data
_pirate_running
_pirate_standing
_screen_data
_seagull_wings_down
_seagull_wings_up
~~~choose_wings_down{00002}
~~~choose_wings_up{00002}
~~~movement{00002}
APPLY_PER_CHAR_COLORS
CHARDATA
COPY_SCREEN_DATA_TO_SCREEN_RAM
ENABLE_MULTICOLOR_CHAR_MODE
INITIALIZE_COCONUT_SPRITE
INITIALIZE_PIRATE_SPRITE
INITIALIZE_SEAGULL_SPRITE
REDIRECT_TO_CUSTOM_CHARSET
SET_SHARED_SCREEN_COLORS

******* 44 Variable(s) *******
1_16TH_SPEED  = $001F
1_32ND_SPEED  = $003F
1_64TH_SPEED  = $007F
1_8TH_SPEED  = $000F
BLACK  = $0000
BLUE  = $0006
BROWN  = $0009
CHAR_DATA_MULTIPLIER  = $0000
coconut_data_ptr  = $07FA
coconut_horz  = $00BE
coconut_vert  = $00BF
coconut_x_ptr  = $D004
coconut_y_ptr  = $D005
CYAN  = $0003
DEST  = $00C2
DEST_HI  = $00C3
FASTEST_SPEED  = $0001
GREY2  = $000C
HALF_SPEED  = $0003
LOOP_TICK  = $00C4
pirate_data_ptr  = $07F8
pirate_running  = $00BB
pirate_standing  = $00BA
pirate_x_ptr  = $D000
pirate_y_ptr  = $D001
QUARTER_SPEED  = $0007
SCREEN_DATA  = $9C00
SCREEN_RAM  = $0400
sd_block_1  = $9C00
sd_block_2  = $9D00
sd_block_3  = $9E00
sd_block_4  = $9F00
seagull_data_ptr  = $07F9
seagull_wings_down  = $00BD
seagull_wings_up  = $00BC
seagull_x_ptr  = $D002
seagull_y_ptr  = $D003
SLOWEST_SPEED  = $00FF
sprite_data  = $00BA
SRC  = $00C0
SRC_HI  = $00C1
tgt_c64  = $0001
VIOLET  = $0004
WHITE  = $0001
******* 19 Unused variables(s) *******
1_16TH_SPEED
1_32ND_SPEED
1_64TH_SPEED
1_8TH_SPEED
BLUE
CHAR_DATA_MULTIPLIER
coconut_vert
CYAN
DEST
DEST_HI
FASTEST_SPEED
HALF_SPEED
pirate_running
QUARTER_SPEED
SCREEN_DATA
SCREEN_RAM
sprite_data
SRC
SRC_HI
tgt_c64

